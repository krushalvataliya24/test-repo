import { IFormula, IConfig, IMathStore, cellId, cellValue, cellValueArray, parseContext, placeholders, IMeta, TBoxRange } from "./types";
declare type triggerContext = Set<number>;
export declare class Store implements IMathStore {
    $count: number;
    private _setter;
    private _getter;
    private _strict;
    private _context;
    private _parser;
    private _printer;
    private _data;
    private _triggers;
    private _parseContext;
    private _err_handler;
    private _holders;
    private _meta;
    constructor(cfg: IConfig);
    getTriggerList(trId: number): number[];
    setValue(id: cellId, value?: cellValue, type?: number, silent?: boolean): void;
    clean(id: cellId): void;
    getValue(id: cellId): cellValue;
    getMeta(): IMeta;
    setMeta(obj: IMeta): void;
    setPlaceholder(name: string, value: cellValue | placeholders): void;
    getPlaceholder(name: string): cellValue | placeholders;
    setMath(id: number, text: string, ctx?: parseContext, silent?: boolean): void;
    refresh(id: cellId): void;
    getMath(id: number): IFormula;
    trigger(cId: number, ctx?: triggerContext): void;
    triggerSet(ctx: triggerContext): void;
    getStats(): {
        math: number;
        trigger: number;
    };
    private _check_for_loops;
    private _setMathAt;
    _removeTriggers(cId: number, next: IFormula): boolean;
    parse(text: string, ctx?: parseContext): IFormula;
    exec(text: string, ctx?: parseContext): cellValue | cellValueArray;
    each(cb: (k: number, obj: IFormula) => void): void;
    setLogger(handler: (e: Error) => void): void;
    _setErr(t: IFormula, err?: Error): cellValue;
    _exec(t: IFormula): cellValue | cellValueArray;
    toString(f: IFormula, ctx?: parseContext): string;
    regenerate(id: number, remove?: boolean, ctx?: parseContext): void;
    recalculate(broken: boolean, ctx: parseContext): void;
    _generate(text: string, ctx: parseContext, prev?: IFormula): IFormula;
    _execAndTrigger(cId: cellId, ctx?: triggerContext): void;
    _complexSetter(cId: number, val: cellValueArray, ctx: triggerContext): void;
    _clearArea(cId: cellId, err: boolean): void;
    _errorAndTrigger(cId: cellId, ctx?: triggerContext): void;
    debug(text: string, asString?: boolean): void | string;
    transpose(id: number, dr: number, dc: number, ctx?: parseContext): void;
    _triggerColumn(c: number, dc: number, tx: triggerContext): void;
    _triggerRow(r: number, dr: number, tx: triggerContext): void;
    moveMath(raw: string | IFormula, dr: number, dc: number, toPage: number, checkRange: TBoxRange, ctx: parseContext, tctx?: parseContext): string;
    _moveMath(raw: IFormula, dr: number, dc: number, toPage: number, checkRange: TBoxRange, tctx: parseContext): IFormula;
    transposeMath(raw: string | IFormula, dx: number, dy: number, ctx?: parseContext): string;
    _transpose(raw: IFormula, r: number, c: number, dr: number, dc: number, ctx: parseContext, tctx?: parseContext): IFormula;
}
export {};
