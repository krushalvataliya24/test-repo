import { IEventSystem } from "../../ts-common/events";
import { View } from "../../ts-common/view";
import { Toolbar } from "../../ts-toolbar";
import { ContextMenu, Menu } from "../../ts-menu";
import { IKeyManager } from "../../ts-common/newKeyManager";
import { FileFormat, ICellInfo, Id, IDataWithStyles, IFormats, ISelection, ISheet, ISpreadsheet, ISpreadsheetConfig, IStylesList, SpreadsheetEvents, ILink, IFilterRules, IFilter } from "./types";
import { Exporter } from "./Exporter";
import { DataPage, IFormula } from "../../muon";
export declare class Spreadsheet extends View implements ISpreadsheet {
    container: HTMLElement;
    events: IEventSystem<SpreadsheetEvents>;
    selection: ISelection;
    config: Required<ISpreadsheetConfig>;
    toolbar: Toolbar;
    menu: Menu;
    contextMenu: ContextMenu;
    sheetContextMenu: ContextMenu;
    export: Exporter;
    keyManager: IKeyManager;
    private _editLine;
    private _dataStore;
    private _math;
    private _grid;
    private _layout;
    private _tabbar;
    private _colorpicker;
    private _colorpickerPopup;
    private _colorpickerTarget;
    private _actionsManager;
    private _sizes;
    private _buffer;
    private _activeInput;
    private _xlsxProxy;
    private _silencedColorChange;
    private _editors;
    private _range;
    private _sheets;
    private _activePage;
    private _focusedSheet;
    private _errorAlert;
    private _editMode;
    private _activeSheetName;
    private _validationForm;
    private _searchForm;
    private _linkForm;
    private _contextMenuVisible;
    private _filterForm;
    private _spanControl;
    constructor(container: HTMLElement | string, config: ISpreadsheetConfig);
    destructor(): void;
    paint(): void;
    load(url: string, type?: FileFormat): Promise<any>;
    parse(data: IDataWithStyles | ICellInfo[], type?: any): void;
    _parseCells(data: any, page: DataPage, multilineClasses?: string[]): void;
    serialize(): {
        sheets: any[];
        styles: {};
        formats: IFormats[];
    };
    setValue(cell: string, value: any | any[]): void;
    getValue(cell: string): any | any[];
    getCellIndex(cell: string): any;
    getFormula(cell: string): string | string[];
    getSheets(): ISheet[];
    _getMath(cell: string, page?: DataPage): IFormula;
    eachCell(cb: any, range?: string): void;
    getStyle(cell: string, linkStyles?: boolean): IStylesList | IStylesList[];
    setStyle(cell: string, style: string | string[] | IStylesList | IStylesList[]): void;
    setFilter(cell?: string, filter?: IFilterRules[]): void;
    getFilter(id?: string): IFilter;
    getFormat(cell: string): any;
    setFormat(cell: string, format: Id | Id[]): void;
    clearSheet(id?: string): void;
    clear(): void;
    isLocked(cell: string): boolean;
    lock(cell: string): void;
    unlock(cell: string): void;
    addRow(cell: string): void;
    deleteRow(cell: string): void;
    addColumn(cell: string): void;
    deleteColumn(cell: string): void;
    undo(): void;
    redo(): void;
    startEdit(cell?: string, initialValue?: string): void;
    endEdit(withoutSave?: boolean): void;
    addSheet(name?: string | {
        name: string;
        id: string;
    }): any;
    removeSheet(id: string): void;
    getActiveSheet(): ISheet;
    setActiveSheet(id: Id): void;
    setValidation(cell: string, options: string | string[]): void;
    search(text?: string, openSearch?: boolean, sheetId?: Id): string[];
    hideSearch(): void;
    insertLink(cell: string, link?: ILink): void;
    fitColumn(cell: string): void;
    sortCells(cell: string, dir?: number): void;
    mergeCells(cell: string, remove?: boolean): void;
    private _showLinkPopup;
    private _showFilter;
    private _checkValidation;
    private _renameSheet;
    private _getSheet;
    private _changeSheet;
    private _callAction;
    private _initLayout;
    private _generateGridStruct;
    private _checkForMissedCells;
    private _generateNewSheetName;
    private _updateGridSizes;
    private _updateGridState;
    private _updateToolbar;
    private _setEventsHandlers;
    private _syncEditLine;
    private _getErrorWindow;
    private _awaitRedraw;
    private _handleAction;
    private _parseCell;
    private _fillCells;
    private _restoreFocus;
    private _initHotkeys;
    private _render;
}
